pivot_longer(-c(site_code),
names_to = "metric")
site_metr_long %>%
ggplot(aes(x = value,
y = site_code, group = site_code)) +
geom_density_ridges() +
facet_wrap(~metric)
ggplot(iris_num, aes(x = Sepal.Length, y = Species_num, group = Species_num)) +
geom_density_ridges()
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges()
ggplot(site_metr_long, aes(x = value, y = site_code)) + geom_density_ridges()
ggplot(site_metr_long, aes(x = value, y = site_code)) + geom_density_ridges() + facet_wrap(~metric)
ggplot(site_metr_long[site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges()
site_metr_long[site_metr_long$metric == "generality",]
site_metr_long[site_metr_long$metric == c("generality", "richness"),]
site_metr_long[site_metr_long$metric == c("generality", "richness"),]
site_metr_long[site_metr_long$metric == "richness",]
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges()
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges() + facet_wrap(~metric)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges(scale= 1) + facet_wrap(~metric)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges(scale= 1, panel_scaling = FALSE) + facet_wrap(~metric)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges(panel_scaling = FALSE) + facet_wrap(~metric)
ggplot(site_metr_long[site_metr_long$metric == "richness",], aes(x = value, y = site_code)) + geom_density_ridges(panel_scaling = FALSE)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
x <- site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
ggplot(x, aes(x = x$value, y = x$site_code)) + geom_density_ridges(panel_scaling = FALSE) + facet_wrap(~metric)
x <- site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
ggplot(x, aes(x = x$value, y = x$site_code)) + geom_density_ridges(panel_scaling = FALSE)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code))
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_ridges(panel_scaling = FALSE)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_histogram()
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density_2d()
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_density()
site_metr_long
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_boxplot()
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_boxplot() +
facet_wrap(~metric)
site_metr_long
site_metr_long[site_metr_long$metric == "richness",]$value
ggplot(site_metr_long, aes(x = site_metr_long[site_metr_long$metric == "richness",]$value, y = site_metr_long[site_metr_long$metric == "generality",]$value)) + geom_point() +
facet_wrap(~metric)
ggplot(site_metr_long, aes(x = site_metr_long[site_metr_long$metric == "richness",]$value, y = site_metr_long[site_metr_long$metric == "generality",]$value)) + geom_point()
site_metr_long[site_metr_long$metric == "richness",]$value
site_metr_long[site_metr_long$metric == "generality",]$value
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_boxplot() +
facet_wrap(~metric)
site_metr_long %>%
ggplot(aes(x = site_metr_long[site_metr_long$metric == "richness",]$value,
y = site_metr_long[site_metr_long$metric == "generality",]$value,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
site_metr_long$value[site_metr_long$metric == "richness",]
site_metr_long[site_metr_long$metric == "richness", value]
site_metr_long[site_metr_long$metric == "richness", site_metr_long$value]
site_metr_long %>% group_by(metric) %>% filter(metric == "richness" | metric == "generality")
site_metr_long %>% filter(metric == "richness" | metric == "generality") %>%
group_by(metric)
site_metr_long %>% filter(metric == "richness" | metric == "generality") %>%
group_by(site_code)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(id_cols = value, names_from = metric)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(id_cols = .value, names_from = metric)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(id_cols = ~value, names_from = metric)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(value_from = ~value, names_from = metric)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(value_from = value, names_from = metric)
site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",] %>%
pivot_wider(value_from = site_metr_long$value, names_from = site_metr_long$metric)
site_metr_long_subset <- site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
site_metr_long_subset <- site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",]
site_metr_long_subset %>%
pivot_wider(value_from = site_metr_long_subset$value, names_from = site_metr_long_subset$metric)
site_metr_long_subset
pivot_wider(value_from = site_metr_long_subset$value, names_from = site_metr_long_subset$metric)
site_metr_long_richness <- site_metr_long[site_metr_long$metric == "richness",]
site_metr_long_generality <- site_metr_long[site_metr_long$metric == "generality",]
plot(x = site_metr_long_richness$value,
y = site_metr_long_generality$value,
colour = site_code)
site_metr_long_richness
plot(x = site_metr_long_richness$value,
y = site_metr_long_generality$value,
colour = site_metr_long_generality$site_code)
ggplot(site_metr_long, aes(x = site_metr_long_richness$value, y = site_metr_long_generality$value, color = site_code)) +
geom_point()
site_metr_long_richness
library(ggridges)
site_level_metrics %>%
mutate(site_code = forcats::fct_reorder(
site_code,
links)) %>%
ggplot(aes(x = links,
y = site_code)) +
geom_density_ridges()
prob_mat_list %>%
map_dbl(sum) %>%
enframe(name = "site_code",
value = "L") %>%
mutate(site_code = forcats::fct_reorder(site_code, L)) %>%
ggplot(aes(y = site_code, x = L)) +
geom_point() +
labs(title = "Lots of variation in the number of links",
subtitle = "not corrected for species pool size",
x = "Number of links")
site_metr_long$site_code <- as.factor(site_metr_long$site_code)
prob_mat_list %>%
map_dbl(sum) %>%
enframe(name = "site_code",
value = "L") %>%
mutate(site_code = forcats::fct_reorder(site_code, L)) %>%
ggplot(aes(y = site_code, x = L)) +
geom_point() +
labs(title = "Lots of variation in the number of links",
subtitle = "not corrected for species pool size",
x = "Number of links")
site_metr_long$site_code <- as.factor(site_metr_long$site_code)
typeof(site_metr_long$site_code)
type.convert(site_metr_long$site_code, factor)
type.convert(site_metr_long$site_code, factor, na.strings = NA)
type.convert(site_metr_long$site_code, factor, na.strings = "NA")
site_metr_long$site_code <- type.convert(site_metr_long$site_code, factor, na.strings = "NA")
typeof(site_metr_long$site_code)
site_metr_long$site_code <- type.convert(site_metr_long$site_code, as.is, na.strings = "NA")
site_metr_long$site_code <- type.convert(site_metr_long$site_code, as.is = T, na.strings = "NA")
typeof(site_metr_long$site_code)
ggplot(site_metr_long[site_metr_long$metric == "richness" | site_metr_long$metric == "generality",], aes(x = value, y = site_code)) + geom_boxplot() +
facet_wrap(~metric)
ggplot2::theme_set(theme_bw())
## functions -----
source(here::here(
"../empirical_food_webs/03_food_web_metrics",
"food_web_functions.R"))
filenames <-
list_site_matrices(data_folder = here::here("probabilistic_matrices"))
# data ---------------
# read in all probability matrices as a list
prob_mat_list <- read_prob_matrices(filenames)
site_level_metrics <- read_csv(here::here(
"../empirical_food_webs/03_food_web_metrics",
"data",
"site_level_metrics_mean.csv"))
site_metr_long <- site_level_metrics  %>%
mutate(site_code = forcats::fct_reorder(
site_code,
links)) %>%
pivot_longer(-c(site_code),
names_to = "metric")
site_metr_l
prob_mat_list %>%
map_dbl(sum) %>%
enframe(name = "site_code",
value = "L") %>%
mutate(site_code = forcats::fct_reorder(site_code, L)) %>%
ggplot(aes(y = site_code, x = L)) +
geom_point() +
labs(title = "Lots of variation in the number of links",
subtitle = "not corrected for species pool size",
x = "Number of links")
cardoso_list <- sp_degree_df %>%
filter(site_code == 'CARDC')
cardoso_mat <- do.call(rbind, lapply(1:nrow(cardoso_list), FUN = function(x) data.frame(bromeliad_id = rep(cardoso_list$bromeliad_id[x],
length(cardoso_list$composition[x])),
sp_id = unlist(cardoso_list$composition[x])))) %>%
mutate(presence = 1) %>%
pivot_wider(names_from = "sp_id", values_from = 'presence', values_fill = 0) %>%
column_to_rownames("bromeliad_id")
cardoso_beta <- beta.div(cardoso_mat, method = 'hellinger')
species_contribution_beta <- cardoso_beta$SCBD
subset_char <- function(namelist, char_vec){
# check that all elements of namelist are in dimnames of matrix
aux <- match(namelist, names(char_vec))
sub_mat <- char_vec[aux]
return(sub_mat)
}
species_contribution_beta_df <- cardoso_list %>%
select(bromeliad_id) %>%
rowwise() %>%
mutate(species_contribution_beta = list(species_contribution_beta))
cardoso_sp_spbd <- cardoso_list %>%
left_join(species_contribution_beta_df) %>%
mutate(spbd = map2(composition, species_contribution_beta, subset_char))
cardoso_sp_spbd$sp_degree[1]
cardoso_sp_spbd$spbd[1]
data.frame(sp_degree = cardoso_sp_spbd$sp_degree[[1]], spbd = cardoso_sp_spbd$spbd[[1]]) %>%
ggplot(aes(x = sp_degree, y = spbd)) + geom_point()
site_level_degree <- lapply(prob_mat_list, colSums)
site_split <- split(sp_degree_df, sp_degree_df$site_code)
calculate_scbd <- function(df){
#### calculates beta diversity based on presence absence, does not take into account abundance
site_mat <- do.call(rbind, lapply(1:nrow(df), FUN = function(x) data.frame(bromeliad_id = rep(df$bromeliad_id[x],
length(df$composition[x])),
sp_id = unlist(df$composition[x])))) %>%
mutate(presence = 1) %>%
pivot_wider(names_from = "sp_id", values_from = 'presence', values_fill = 0) %>%
column_to_rownames("bromeliad_id")
site_beta <- beta.div(site_mat, method = 'hellinger')
species_contribution_beta <- site_beta$SCBD
return(species_contribution_beta)
}
all_site_scbd <- lapply(site_split, calculate_scbd)
scbd_df <- all_site_scbd %>%
map(~data.frame(scbd = .x)) %>%
map_df(~ rownames_to_column(.x, "species_name"), .id= 'site')
degree_df <- site_level_degree %>%
map(~data.frame(degree = .x)) %>%
map_df(~ rownames_to_column(.x, "species_name"), .id= 'site')
scbd_df %>%
left_join(degree_df) %>%
ggplot(aes(x = degree, y = scbd)) +
facet_wrap(~site) +
geom_point() +
geom_smooth(method = 'lm')
degree_df %>%
ggplot(aes(x = degree, fill = site)) +
geom_histogram() +
facet_wrap(~site)
trimmedbrom_pc <- read_csv(file = "../empirical_food_webs/05_models/data/trimmedbrom_pc.csv") %>%
mutate(visit_id = as.factor(visit_id),
bromeliad_id = as.character(bromeliad_id),
speciesPool = as.factor(speciesPool)) %>%
#site_code = as.factor(site_code)) %>%
filter(!is.na(max_water_combined)) %>%
filter(!is.na(total_detritus)) %>%
filter(!is.na(open.canopy))
max_water_all <- trimmedbrom_pc %>%
select(max_water_combined)
trimmedbrom_pc %>%
ggplot(aes(x = max_water_combined)) +
facet_wrap(~site_code) +
geom_histogram() +
scale_x_log10() +
geom_histogram(data = max_water_all, aes(x = max_water_combined), alpha = 0.5) +
theme_cowplot()
## environment dist #
bromleiads_environment <- trimmedbrom_pc %>%
select(bromeliad_id, site_code, log_detritus, max_water_combined) %>%
mutate(log_water = log(max_water_combined)) %>%
select(-max_water_combined)
bromeliads_split <- split(bromleiads_environment, bromleiads_environment$site_code)
bromeliad_enviornment_split <- bromeliads_split %>%
map(~select(.x, -site_code)) %>%
map(~column_to_rownames(.x, "bromeliad_id"))
bromeliad_environment_dist <- bromeliad_enviornment_split %>%
map(~dist(.x))
abundance_correct_bromeliad <- abd_data %>%
filter(bromeliad_id %in% bromleiads_environment$bromeliad_id) %>%
left_join(site_codes) %>%
select(bwg_name, bromeliad_id, abundance, site_code)
abundance_split <- split(abundance_correct_bromeliad, abundance_correct_bromeliad$site_code)
abundance_wider <- abundance_split %>%
map(~select(.x, -site_code)) %>%
map(~group_by(.x, bwg_name, bromeliad_id)) %>%
map(~summarise(.x, abundance_total = sum(abundance))) %>%
map(~pivot_wider(.x, names_from = bwg_name, values_from = abundance_total, values_fill = 0)) %>%
map(~column_to_rownames(.x, "bromeliad_id"))
beta_div_abundance <- abundance_wider %>%
map(~vegdist(.x, binary=FALSE, method = "bray"))
mantel_loo_function <- function(site) {
mantel_res <- mantel(beta_div_abundance[[site]], bromeliad_environment_dist[[site]])
mantel_loo_all <- c()
for(i in 1:ncol(abundance_wider[[site]])){
new_abundance <- abundance_wider[[site]][, -i]
beta_loo <- vegdist(new_abundance, binary=FALSE, method = "bray")
mantel_loo <- mantel(beta_loo, bromeliad_environment_dist[[site]])
mantel_loo_all <- c(mantel_loo_all, mantel_loo$statistic)
}
mantel_all_df <- data.frame(bwg_name =   colnames(abundance_wider[[site]]), mantel_r_loo = mantel_loo_all, mantel_original_r = mantel_res$statistic, site_code = site)
return(mantel_all_df)
}
mantel_loo_function(names(beta_div_abundance)[2])
mantel_all_sites <- lapply(names(beta_div_abundance), safely(mantel_loo_function))
mantel_all_sites_df_all <- mantel_all_sites %>%
map(~ .x$result) %>%
keep(~ is.null(.x) == FALSE) %>%
map_df(~data.frame(.x)) %>%
mutate(mantel_ratio = mantel_r_loo/mantel_original_r)
site_degree_df <- site_level_degree %>%
map(~data.frame(degree = .x)) %>%
map_df(~rownames_to_column(.x, "bwg_name"),  .id = 'site_code')
mantel_contribution_degree <- mantel_all_sites_df_all %>%
left_join(site_degree_df) %>%
group_by(site_code) %>%
mutate(sd_mantel_loo = sd(mantel_r_loo)) %>%
mutate(z_score = (mantel_original_r - mantel_r_loo)/sd_mantel_loo)
mantel_contribution_degree %>%
ggplot(aes(x = degree, y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~site_code, scales = 'free')
mantel_contribution_degree %>%
ggplot(aes(x = mantel_r_loo)) +
geom_histogram() +
geom_vline(aes(xintercept = mantel_original_r), colour = 'red') +
facet_wrap(~site_code, scales = 'free')
library(ggridges)
mantel_contribution_degree %>%
ungroup %>%
mutate(site_code_f = forcats::fct_reorder(site_code, mantel_r_loo)) %>%
ggplot(aes(x = mantel_r_loo, y = site_code_f)) +
stat_density_ridges()
water_site <- trimmedbrom_pc %>%
group_by(site_code) %>%
summarise(sd_wat = sd(max_water_combined), n = n())
mantel_contribution_degree %>%
left_join(water_site) %>%
ggplot(aes(x = sd_wat, y = mantel_r_loo)) +
geom_point() +
geom_point(aes(y = mantel_original_r), size = 2, col = "green") +
geom_hline(yintercept = 0)
water_site %>%
filter(sd_wat > 1e3)
site_order <- water_site %>%
arrange(sd_wat) %>% select(site_code) %>% unlist()
trimmedbrom_pc %>%
filter(site_code == "CABO") %>% View()
mantel_contribution_degree %>%
mutate(site_code = factor(site_code, levels = site_order)) %>%
ggplot(aes(x = z_score, y = degree)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~site_code, scales = 'free')
mantel_contribution_degree %>%
mutate(site_code = factor(site_code, levels = site_order)) %>%
ggplot(aes(x = mantel_r_loo)) +
geom_histogram() +
geom_vline(aes(xintercept = mantel_original_r), colour = 'red') +
facet_wrap(~site_code, scales = 'free')
degree_df %>%
ggplot(aes(x = degree, fill = site)) +
geom_histogram() +
facet_wrap(~site)
degree_df
degree_df %>%
ggplot(aes(x = degree, fill = site)) +
geom_histogram() +
facet_wrap(~site)
site_level_degree <- lapply(prob_mat_list, colSums)
site_split <- split(sp_degree_df, sp_degree_df$site_code)
calculate_scbd <- function(df){
#### calculates beta diversity based on presence absence, does not take into account abundance
site_mat <- do.call(rbind, lapply(1:nrow(df), FUN = function(x) data.frame(bromeliad_id = rep(df$bromeliad_id[x],
length(df$composition[x])),
sp_id = unlist(df$composition[x])))) %>%
mutate(presence = 1) %>%
pivot_wider(names_from = "sp_id", values_from = 'presence', values_fill = 0) %>%
column_to_rownames("bromeliad_id")
site_beta <- beta.div(site_mat, method = 'hellinger')
species_contribution_beta <- site_beta$SCBD
return(species_contribution_beta)
}
all_site_scbd <- lapply(site_split, calculate_scbd)
prob_mat_list
site_level_degree
View(site_degree_df)
# read in all probability matrices as a list
prob_mat_list <- read_prob_matrices(filenames)
site_bromeliad_level_composition <- readr::read_rds("../empirical_food_webs/03_food_web_metrics/data/site_bromeliad_level_composition.rds")
prob_mat_df <- enframe(prob_mat_list,
name = "site_code",
value = "prob_mat")
sub_mats_df <- site_bromeliad_level_composition %>%
left_join(prob_mat_df) %>%
mutate(sub_mats = map2(composition, prob_mat, subset_mat))
## bromeliad data
site_codes <-
readr::read_csv("../empirical_food_webs/probabilistic_matrices/site_codes.csv")
# Get species composition of each bromeliad
abd_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/abundance_cleaned.csv")
# bromeliad lookup table
brm_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/bromeliads_cleaned.csv")
##### get webs ####
source("../empirical_food_webs/03_food_web_metrics/food_web_functions.R")
# Find the data folder using the `here` package
filenames <-
list_site_matrices2(data_folder = "../empirical_food_webs/03_food_web_metrics/data/pasted_matrices/")
# read in all probability matrices as a list
prob_mat_list <- read_prob_matrices(filenames)
## bromeliad data
site_codes <-
readr::read_csv("../empirical_food_webs/probabilistic_matrices/site_codes.csv")
# Get species composition of each bromeliad
abd_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/abundance_cleaned.csv")
# bromeliad lookup table
brm_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/bromeliads_cleaned.csv")
##### get webs ####
source("../empirical_food_webs/03_food_web_metrics/food_web_functions.R")
# Find the data folder using the `here` package
filenames <-
list_site_matrices2(data_folder = "../empirical_food_webs/03_food_web_metrics/data/pasted_matrices/")
# read in all probability matrices as a list
prob_mat_list <- read_prob_matrices(filenames)
site_bromeliad_level_composition <- readr::read_rds("../empirical_food_webs/03_food_web_metrics/data/site_bromeliad_level_composition.rds")
# store prob mat list in a data frame
prob_mat_df <- enframe(prob_mat_list,
name = "site_code",
value = "prob_mat")
sub_mats_df <- site_bromeliad_level_composition %>%
left_join(prob_mat_df) %>%
mutate(sub_mats = map2(composition, prob_mat, subset_mat))
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("dplyr", "tibble", "purrr", "adespatial", "tidyr", "ggplot2", "readr", "cowplot", "vegan", "tidyverse", "here", "ggridges")
ipak(packages)
bromelaid_all <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_all_metrics.csv"))
bromelaid_basic <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_basic_metrics.csv"))
bromelaid_basic %>%
ggplot(aes(x = richness,
y = links/richness,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
degree_df %>%
ggplot(aes(x = degree, fill = site)) +
geom_histogram() +
facet_wrap(~site)
sp_degree_df <- sub_mats_df %>%
mutate(sp_degree = map(sub_mats, colSums))
sp_degree_df <- sub_mats_df %>%
mutate(sp_degree = map(sub_mats, colSums))
source('~/Documents/science/sCaleWebs/wg2022-betadiv/code/01_get_link_abundance.R')
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("dplyr", "tibble", "purrr", "adespatial", "tidyr", "ggplot2", "readr", "cowplot", "vegan", "tidyverse", "here", "ggridges", "cheddar")
ipak(packages)
source('~/Documents/science/sCaleWebs/wg2022-betadiv/code/01_get_link_abundance.R')
abundance_correct_bromeliad
abundance_correct_bromeliad <- abd_data %>%
filter(bromeliad_id %in% bromleiads_environment$bromeliad_id) %>%
left_join(site_codes) %>%
select(bwg_name, bromeliad_id, abundance, site_code)
abundance_split <- split(abundance_correct_bromeliad, abundance_correct_bromeliad$site_code)
beta_div_abundance
site_degree_df
mantel_contribution_degree %>%
ungroup %>%
mutate(site_code_f = forcats::fct_reorder(site_code, mantel_r_loo)) %>%
ggplot(aes(x = mantel_r_loo, y = site_code_f)) +
stat_density_ridges()
mantel_contribution_degree %>%
left_join(water_site) %>%
ggplot(aes(x = sd_wat, y = mantel_r_loo)) +
geom_point() +
geom_point(aes(y = mantel_original_r), size = 2, col = "green") +
geom_hline(yintercept = 0)
mantel_contribution_degree %>%
ggplot(aes(x = degree, y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~site_code, scales = 'free')
mantel_contribution_degree
bromeliad_basic
bromeliad_all <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_all_metrics.csv"))
bromeliad_basic <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_basic_metrics.csv"))
bromeliad_basic %>%
ggplot(aes(x = richness,
y = links/richness,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
bromeliad_basic
bromeliad_all
bromeliad_all %>%
ggplot(aes(x = richness,
y = generality,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
bromeliad_all %>%
ggplot(aes(x = richness,
y = prop.top,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
bromeliad_all <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_all_metrics.csv"))
bromeliad_basic <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_basic_metrics.csv"))
bromeliad_basic %>%
ggplot(aes(x = richness,
y = links/richness,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = FALSE)
source("code/01_get_link_abundance.R")
