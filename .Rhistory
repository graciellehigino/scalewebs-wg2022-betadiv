ggplot(aes(x = mantel_contribution_degree$degree, y = n)) +
geom_bar(stat = "identity") +
coord_cartesian(xlim = c(0, 10))
tibble(mantel_contribution_degree$degree) |>
count(mantel_contribution_degree$degree) |>
ggplot(aes(x = degree, y = n)) +
geom_bar(stat = "identity") +
coord_cartesian(xlim = c(0, 10))
tibble(mantel_contribution_degree$degree)
tibble(mantel_contribution_degree$degree) |>
count(mantel_contribution_degree$degree) |>
ggplot(aes(x = mantel_contribution_degree$degree, y = n)) +
geom_bar(stat = "identity")
mantel_contribution_degree$degree <- links
links <- mantel_contribution_degree$degree
links
tibble(links) |>
count(links) |>
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity")
count(links)
tibble(links) |>
count(links)
tibble(links) |>
count(links) |>
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity")
tibble(links)  %>%
count(links) %>%
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity")
links_count <- tibble(links) |>
count(links)
links_count
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity")
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_point()
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_col(stat = "identity")
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_histogram(stat = "identity")
links_count <- tibble(links) |>
count(links) %>%
as.data.frame()
links_count
links_count <- tibble(round(links)) |>
count(links) %>%
as.data.frame()
round(links)
links <- round(mantel_contribution_degree$degree)
links_count <- tibble(links)) |>
links_count <- tibble(links) |>
count(links) %>%
as.data.frame()
links_count
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_histogram(stat = "identity")
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity")
bromeliad_basic
links_count %>%
ggplot(aes(x = links, y = n)) +
geom_bar(stat = "identity") +
theme_classic()
bromeliad_all <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_all_metrics.csv"))
bromeliad_basic <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_basic_metrics.csv"))
bromeliad_basic %>%
ggplot(aes(x = richness,
y = links/richness,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = "none")
bromeliad_basic
mean(bromeliad_basic&richness)
bromeliad_basic&richness
mean(bromeliad_basic$richness)
aggregate(bromeliad_basic$richness list(bromeliad_basic$site_code), FUN=mean)
aggregate(bromeliad_basic$richness, list(bromeliad_basic$site_code), FUN=mean)
links_site <- aggregate(bromeliad_basic$links, list(bromeliad_basic$site_code), FUN=mean)
links_site
# Richness mean by site
richness_site <- aggregate(bromeliad_basic$richness, list(bromeliad_basic$site_code), FUN=mean)
scatter.smooth(richness_site$x, links_site$x)
links_site <- aggregate(bromeliad_basic$links, list(bromeliad_basic$site_code), FUN=median
scatter.smooth(richness_site$x, links_site$x)
links_site <- aggregate(bromeliad_basic$links, list(bromeliad_basic$site_code), FUN=median)
scatter.smooth(richness_site$x, links_site$x)
links_site <- aggregate(bromeliad_basic$links, list(bromeliad_basic$site_code), FUN=mode)
scatter.smooth(richness_site$x, links_site$x)
links_site
summary(bromeliad_basic$links)
mode <- function(x) {
return(as.numeric(names(which.max(table(x)))))
}
links_site <- aggregate(bromeliad_basic$links, list(bromeliad_basic$site_code), FUN=mode)
links_site
scatter.smooth(richness_site$x, links_site$x)
scatter(richness_site$x, links_site$x)
plot(richness_site$x, links_site$x)
kmeans(links_site, centers = 6)
kmeans(links_site, centers = 6, iter.max = 10, nstart = 1)
kmeans(links_site, iter.max = 10, nstart = 1)
kmeans(links_site, centers = 3, iter.max = 10, nstart = 1)
links_site
kmeans(as.matrix(links_site), centers = 3, iter.max = 10, nstart = 1)
kmeans(as.numeric(links_site$x), centers = 3, iter.max = 10, nstart = 1)
library(factoextra)
pacman::p_load(factoextra)
fviz_nbclust(as.numeric(links_site$x))
fviz_nbclust(scale(as.numeric(links_site$x)), kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
kmeans_links <- kmeans(as.numeric(links_site$x), centers = 3, iter.max = 10, nstart = 1)
fviz_cluster(kmeans_links, links_site, ellipse.type = "norm")
fviz_cluster(kmeans_links, links_site$x, ellipse.type = "norm")
kmeans_links
fviz_cluster(kmeans_links, as.numeric(links_site), ellipse.type = "norm")
data("iris")
head(iris)
fviz_cluster(kmeans_links, as.numeric(links_site$x), ellipse.type = "norm")
richness_site
fviz_cluster(kmeans_links, cbind(as.numeric(links_site$x), as.numeric(richness_site$x)), ellipse.type = "norm")
as.numeric(richness_site$x)
cbind(as.numeric(links_site$x), as.numeric(richness_site$x))
kmeans_links
kmeans_links$cluster
richness_site
data("iris")
head(iris)
# Remove species column (5) and scale the data
iris.scaled <- scale(iris[, -5])
# K-means clustering
# +++++++++++++++++++++
km.res <- kmeans(iris.scaled, 3, nstart = 10)
# Visualize kmeans clustering
# use repel = TRUE to avoid overplotting
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
data("iris")
head(iris)
# Remove species column (5) and scale the data
iris.scaled <- scale(iris[, -5])
# K-means clustering
# +++++++++++++++++++++
km.res <- kmeans(iris.scaled, 3, nstart = 10)
# Visualize kmeans clustering
# use repel = TRUE to avoid overplotting
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
manteL_subset %>%
ggplot(aes(x = degree , y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlim(1,10) +
facet_wrap(~site_code, scales = 'free')
manteL_subset %>%
ggplot(aes(x = degree , y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlim(1,10) +
facet_wrap(~site_code, scales = 'free')
manteL_subset %>%
ggplot(aes(x = degree , y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlim(1,10) +
facet_wrap(~site_code, scales = 'free')
manteL_subset %>%
ggplot(aes(x = degree , y = z_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlim(1,10) +
facet_wrap(~site_code, scales = 'free')
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
sub_mats_df
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
packages <- c("dplyr", "tibble", "purrr", "adespatial", "tidyr", "ggplot2", "readr", "cowplot", "vegan", "tidyverse", "here", "ggridges", "cheddar", "factoextra")
# install.packages("pacman")
pacman::p_load(packages, character.only = TRUE)
## bromeliad data
site_codes <-
readr::read_csv("../empirical_food_webs/probabilistic_matrices/site_codes.csv")
# Get species composition of each bromeliad
abd_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/abundance_cleaned.csv")
# bromeliad lookup table
brm_data <-
readr::read_csv("../empirical_food_webs/01_combined_food_web/data/bromeliads_cleaned.csv")
##### get webs ####
source("../empirical_food_webs/03_food_web_metrics/food_web_functions.R")
# Find the data folder using the `here` package
filenames <-
list_site_matrices2(data_folder = "../empirical_food_webs/03_food_web_metrics/data/pasted_matrices/")
# read in all probability matrices as a list
prob_mat_list <- read_prob_matrices(filenames)
site_bromeliad_level_composition <- readr::read_rds("../empirical_food_webs/03_food_web_metrics/data/site_bromeliad_level_composition.rds")
# store prob mat list in a data frame
prob_mat_df <- enframe(prob_mat_list,
name = "site_code",
value = "prob_mat")
sub_mats_df <- site_bromeliad_level_composition %>%
left_join(prob_mat_df) %>%
mutate(sub_mats = map2(composition, prob_mat, subset_mat))
brm_data
View(brm_data)
bromeliad_all <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_all_metrics.csv"))
bromeliad_basic <- read_csv(here::here("../empirical_food_webs/03_food_web_metrics",
"data",
"bromeliad_level_basic_metrics.csv"))
bromeliad_basic %>%
ggplot(aes(x = richness,
y = links/richness,
colour = site_code)) +
geom_point(position = position_jitter(width = .2)) +
scale_colour_viridis_d(guide = "none")
sp_degree_df <- sub_mats_df %>%
mutate(sp_degree = map(sub_mats, colSums))
View(sp_degree_df)
sp_degree_df$sp_degree[1]
max(sp_degree_df$sp_degree[1])
max(sp_degree_df$sp_degree[[1]])
mean(sp_degree_df$sp_degree[[1]])
# Function to calculate the most common number in a set
mode <- function(x) {
return(as.numeric(names(which.max(table(x)))))
}
View(sp_degree_df)
levels(sp_degree_df$site_code)
typeof(sp_degree_df$site_code)
levels(as.factor(sp_degree_df$site_code))
list(bromeliad_basic$site_code)
list(sp_degree_df$site_code)
# Find the most common number of links per bromeliad
links_site_mod <- for(i in list(sp_degree_df$site_code)){
aggregate(sp_degree_df$sp_degree, i, FUN=mode)
}
# Find the most common number of links per bromeliad
links_site_mod <- for(i in list(sp_degree_df$site_code)){
x <- aggregate(sp_degree_df$sp_degree, i, FUN=mode)
return(x)
}
# Find the most common number of links per bromeliad
links_site_mod <- for(i in 1:nrow(sp_degree_df)){
x <- aggregate(sp_degree_df$sp_degree, list(sp_degree_df$site_code), FUN=mode)
return(x)
}
aggregate(sp_degree_df$sp_degree, list(sp_degree_df$site_code), FUN=mode)
aggregate(sp_degree_df[1]$sp_degree, list(sp_degree_df$site_code), FUN=mode)
aggregate(sp_degree_df$sp_degree[[1]], list(sp_degree_df$site_code), FUN=mode)
lapply(sp_degree_df$sp_degree[[1]], list(sp_degree_df$site_code), FUN=mode)
lapply(sp_degree_df$sp_degree[[1]],  FUN=mode)
lapply(sp_degree_df$sp_degree[1], FUN=mode)
lapply(sp_degree_df$sp_degree[1], FUN=max)
range_vector <- c()
for(i in 1:nrow(sp_degree_df)){
max <- lapply(sp_degree_df$sp_degree[i], FUN=max)
mod <- lapply(sp_degree_df$sp_degree[i], FUN=mode)
range[i] <- max - mod
}
for(i in 1:nrow(sp_degree_df)){
max <- lapply(sp_degree_df$sp_degree[i], FUN=max)
mod <- lapply(sp_degree_df$sp_degree[i], FUN=mode)
#range[i] <- max - mod
}
for(i in 1:nrow(sp_degree_df)){
max <- lapply(sp_degree_df$sp_degree[i], FUN=max)
mod <- lapply(sp_degree_df$sp_degree[i], FUN=mode)
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[j] <- max - mod
}
}
max(sp_degree_df$sp_degree[1])
max(sp_degree_df$sp_degree[[1]])
for(i in 1:nrow(sp_degree_df)){
max <- sp_degree_df$sp_degree[[i]], FUN=max)
mod <- mode(sp_degree_df$sp_degree[[i]])
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[j] <- max - mod
}
}
range_vector <- vector()
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[j] <- max - mod
}
}
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range <- max - mod
}
}
range
range_vector <- vector(mode="numeric", length=levels(as.factor(sp_degree_df$site_code)))
range_vector <- vector(mode="numeric", length=count(levels(as.factor(sp_degree_df$site_code))))
range_vector <- vector(mode="numeric", length=table(levels(as.factor(sp_degree_df$site_code))))
table(levels(as.factor(sp_degree_df$site_code))))
table(levels(as.factor(sp_degree_df$site_code)))
length(levels(as.factor(sp_degree_df$site_code)))
range_vector <- vector(mode="numeric", length=length(levels(as.factor(sp_degree_df$site_code))))
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range <- max - mod
}
}
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[i] <- max - mod
}
}
rm(range)
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[i] <- max - mod
}
}
range
range_vector
range_vector[1]
range_vector[2]
length(levels(as.factor(sp_degree_df$site_code)))
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[j] <- max - mod
}
}
range_vector <- vector(mode="numeric", length=nrow(sp_degree_df))
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
for(j in 1:length(levels(as.factor(sp_degree_df$site_code)))){
range[j] <- max - mod
}
}
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
range[i] <- max - mod
}
range <- max - mod
for(i in 1:nrow(sp_degree_df)){
max <- max(sp_degree_df$sp_degree[[i]])
mod <- mode(sp_degree_df$sp_degree[[i]])
range <- max - mod
}
for(i in 1:nrow(sp_degree_df)){
range[i] <- max(sp_degree_df$sp_degree[[i]]) - mode(sp_degree_df$sp_degree[[i]])
}
for(i in 1:nrow(sp_degree_df)){
range[i] <- max(sp_degree_df$sp_degree[[i]]) - mode(sp_degree_df$sp_degree[[i]])
}
range
min(range)
max(range)
sp_degree_df <- cbind(sp_degree_df, range)
sp_degree_df
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df %>%
ggplot(aes(range)) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar(stat = "identity") +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(reorder(range))) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(reorder(range, -value))) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(reorder(sp_degree_df, -range))) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar(stat = "identitu") +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar(stat = "identity") +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(range)) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
sp_degree_df$site_code == "CABO",range]
sp_degree_df[sp_degree_df$site_code == "CABO", range]
sp_degree_df[sp_degree_df$site_code == "CABO",]
sp_degree_df[sp_degree_df$site_code == "CABO",]$range
round(sp_degree_df[sp_degree_df$site_code == "CABO",]$range)
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(round(range))) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(reorder(round(range)))) +
geom_bar() +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(round(range))) +
geom_bar() +
scale_x_discrete(limits = positions) +
facet_wrap(~site_code, scales = 'free')
# Calculate the range between the most common number of links and the max. number of links per site - the bigger the range, the skewer the distribution of degrees (i.e. few highly generalist predators)
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
as.data.frame() %>%
ggplot(aes(round(range))) +
geom_bar() +
scale_x_discrete(limits = range) +
facet_wrap(~site_code, scales = 'free')
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
count(round(range)) %>%
ggplot(aes(x = reorder(round(range), -n), y = n)) +
geom_bar(stat = 'identity') +
xlab("Position")
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
count(round(range)) %>%
ggplot(aes(x = reorder(round(range), -round(range)))) +
geom_bar(stat = 'identity') +
xlab("Position")
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
count(round(range)) %>%
ggplot(aes(x = reorder(round(range), n), y = n))) +
sp_degree_df[sp_degree_df$site_code == "CABO",] %>%
count(round(range)) %>%
ggplot(aes(x = reorder(round(range), n), y = n)) +
geom_bar(stat = 'identity') +
xlab("Position")
count(round(range))
round(range)
count(as.numeric(round(range)))
count(as.numeric(round(range)))
source("code/01_get_link_abundance.R")
q()
